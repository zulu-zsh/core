#!/usr/bin/env zsh

###
# Output usage information
###
function _zulu_install_usage() {
  echo $(color yellow "Usage:")
  echo "  zulu install <packages...>"
}

###
# Install a package
###
function _zulu_install_package() {
  local package json repo dir file link packagetype post_install
  local -a dependencies

  package="$1"

  # Check if the package is already installed
  root="$base/packages/$package"
  if [[ -d "$root" ]]; then
    echo $(color red "Package '$package' is already installed")
    return 1
  fi

  # Get the JSON from the index
  json=$(cat "$index/$package")

  # Get the repository URL from the JSON
  repo=$(jsonval $json 'repository')

  # Clone the repository
  cd "$base/packages"
  git clone --recursive $repo $package

  # Run any post install scripts
  cd "$base/packages/$package"
  post_install=$(jsonval $json 'postinstall')
  echo "Post install: $post_install"
  if [[ -n $post_install ]]; then
    eval "$post_install"
  fi

  packagefile="$config/packages"
  in_packagefile=$(cat $packagefile | grep -e '^'${package}'$')
  if [[ "$in_packagefile" = "" ]]; then
    echo "$package" >> $packagefile
  fi

  return
}

###
# Zulu command to handle package installation
###
function _zulu_install() {
  local base index packages out

  # Parse options
  zparseopts -D h=help -help=help

  # Output help and return if requested
  if [[ -n $help ]]; then
    _zulu_install_usage
    return
  fi

  # Set up some variables
  base=${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}
  config=${ZULU_CONFIG_DIR:-"${ZDOTDIR:-$HOME}/.config/zulu"}
  index="${base}/index/packages"

  packages=($@)
  packagefile="$config/packages"

  if [[ ! -f $packagefile ]]; then
    touch $packagefile
  fi

  # If no package name is passed, throw an error
  if [[ ${#packages} -eq 0 ]]; then
    echo $(color red "Please specify a package name")
    echo
    _zulu_install_usage
    return 1
  fi

  # Do a first loop, to ensure all packages exist
  for package in "$packages[@]"; do
    if [[ ! -f "$index/$package" ]]; then
      echo $(color red "Package '$package' is not in the index")
      return 1
    fi
  done

  # Do a second loop, to do the actual install
  for package in "$packages[@]"; do
    # Get the JSON from the index
    json=$(cat "$index/$package")

    # Get the list of dependencies from the index
    dependencies=($(echo $(jsonval $json 'dependencies') | tr "," "\n" | sed 's/\[//g' | sed 's/\]//g'))

    # If there are dependencies in the list
    if [[ ${#dependencies} -ne 0 ]]; then
      # Loop through each of the dependencies
      for dependency in "$dependencies[@]"; do
        # Check that the dependency is not already installed
        if [[ ! -d "$base/packages/$dependency" ]]; then
          revolver start "Installing dependency $dependency..."
          out=$(_zulu_install_package "$dependency" 2>&1)
          revolver stop

          if [ $? -eq 0 ]; then
            echo "$(color green '✔') Finished installing dependency $dependency        "
            zulu link $dependency
          else
            echo "$(color red '✘') Error installing dependency $dependency        "
            echo "$out"
          fi
        fi
      done
    fi

    revolver start "Installing $package..."
    out=$(_zulu_install_package "$package" 2>&1)
    revolver stop

    if [ $? -eq 0 ]; then
      echo "$(color green '✔') Finished installing $package        "
      zulu link $package
    else
      echo "$(color red '✘') Error installing $package        "
      echo "$out"
    fi
  done
}
