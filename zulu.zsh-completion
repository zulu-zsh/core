#compdef zulu

###
# List of Commands
###
_zulu_commands=(
  'install:Install a package'
  'uninstall:Uninstall a package'
  'bundle:Manage packagefile'
  'upgrade:Upgrade a package'
  'update:Update the package index'
  'self-update:Update the zulu core framework'
  'link:Create symbolic links to enable a package'
  'unlink:Remove symbolic links to disable a package'
  'list:List packages'
  'info:Show information for a package'
  'search:Search the package index'
  'theme:Change the theme'
  'init:Reload zulu configuration'
  'alias:Functions for adding/removing aliases'
  'func:Functions for adding/removing functions'
  'var:Functions for adding/removing environment variables'
  'path:Functions for adding/removing directories from \$path'
  'manpath:Functions for adding/removing directories from \$manpath'
  'cdpath:Functions for adding/removing directories from \$cdpath'
  'fpath:Functions for adding/removing directories from \$fpath'
)

###
# Commands in the path context
###
_zulu_path_commands=(
  'add:Add a directory to $path'
  'rm:Remove a directory from $path'
  'reset:Restore $path from pathfile'
)

###
# Commands in the fpath context
###
_zulu_fpath_commands=(
  'add:Add a directory to $fpath'
  'rm:Remove a directory from $fpath'
  'reset:Restore $fpath from pathfile'
)

###
# Commands in the cdpath context
###
_zulu_cdpath_commands=(
  'add:Add a directory to $cdpath'
  'rm:Remove a directory from $cdpath'
  'reset:Restore $cdpath from pathfile'
)

###
# Commands in the manpath context
###
_zulu_manpath_commands=(
  'add:Add a directory to $manpath'
  'rm:Remove a directory from $manpath'
  'reset:Restore $cdpath from pathfile'
)

###
# Commands in the alias context
###
_zulu_alias_commands=(
  'add:Add a new alias'
  'rm:Remove an existing alias'
  'load:Reload all aliases'
)

###
# Commands in the func context
###
_zulu_func_commands=(
  'add:Add a new function'
  'edit:Edit an existing function'
  'rm:Remove an existing function'
  'load:Reload all functions'
)

###
# Commands in the var context
###
_zulu_var_commands=(
  'add:Add a new environment variable'
  'rm:Remove an existing environment variable'
  'load:Reload all environment variables'
)

###
# Locating the package file
###
local base config

base=${ZULU_DIR:-"${ZDOTDIR:-$HOME}/.zulu"}
config_dir=${ZULU_CONFIG_DIR:-"${ZDOTDIR:-$HOME}/.config/zulu"}

_zulu_package_file="$config/packages"
_zulu_index="$base/index"

###
# Define a default caching policy for zulu: we rebuild the cache
# if the cache file is older than zulu's package index.
###
local cache_policy
zstyle -s ":completion::complete:zulu:*" cache-policy cache_policy
if [[ -z "$cache_policy" ]]; then
  zstyle ":completion::complete:zulu:*" cache-policy _zulu_caching_policy
fi

_zulu_caching_policy() {
  [[ "$_zulu_package_file" -nt "$1" || "$_zulu_index" -nt "$1" ]] && return 0
  return 1
}

# ~~~ CACHING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Using the cache mechanism of zsh to store packages
(( $+functions[_zulu_get_packages] )) ||
_zulu_get_packages() {
  local package_list cacheid='ZULU_PACKAGE_LIST'
  if ( [[ ${+_zulu_package_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _zulu_package_list=()
    IFS=$'\n' package_list=($(zulu list --all --describe --simple))

    for i in "$package_list[@]"; do
      _zulu_package_list+=("$(echo $i | cut -c 1-30 | tr -d " "):$(echo $i | cut -c 31-)")
    done

    _store_cache $cacheid _zulu_package_list
  fi;
}

# ~~~ CACHING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Using the cache mechanism of zsh to store packages
(( $+functions[_zulu_get_installed_packages] )) ||
_zulu_get_installed_packages() {
  local package_list cacheid='ZULU_INSTALLED_PACKAGE_LIST'
  if ( [[ ${+_zulu_installed_package_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _zulu_installed_package_list=()
    IFS=$'\n' package_list=($(zulu list --installed --describe --simple))

    for i in "$package_list[@]"; do
      _zulu_installed_package_list+=("$(echo $i | cut -c 1-30 | tr -d " "):$(echo $i | cut -c 31-)")
    done

    _store_cache $cacheid _zulu_installed_package_list
  fi;
}

# ~~~ CACHING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Using the cache mechanism of zsh to store packages
(( $+functions[_zulu_get_not_installed_packages] )) ||
_zulu_get_not_installed_packages() {
  local package_list cacheid='ZULU_NOT_INSTALLED_PACKAGE_LIST'
  if ( [[ ${+_zulu_not_installed_package_list} -eq 0 ]] || _cache_invalid $cacheid ) \
            && ! _retrieve_cache $cacheid;
  then
    _zulu_not_installed_package_list=()
    IFS=$'\n' package_list=($(zulu list --not-installed --describe --simple))

    for i in "$package_list[@]"; do
      _zulu_not_installed_package_list+=("$(echo $i | cut -c 1-30 | tr -d " "):$(echo $i | cut -c 31-)")
    done

    _store_cache $cacheid _zulu_not_installed_package_list
  fi;
}

_zulu() {
  typeset -A opt_args
  local context state line curcontext="$curcontext"

  _arguments -A \
    '(-h --help)'{-h,--help}'[show help text and exit]' \
    '(-v --version)'{-v,--version}'[show version information and exit]'

  _arguments \
    '1: :_zulu_cmds' \
    '*::arg:->args'

  case "$state" in
    (args)
      case "$words[1]" in
        (install)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '--ignore-dependencies[Don'\''t automatically install dependencies]' \
            '--no-autoselect-themes[Don'\''t autoselect themes after installing]'

          _arguments \
            '*: :_zulu_not_installed_packages'
          ;;
        (info)
          _arguments \
            '*: :_zulu_packages'
          ;;
        (alias)
          _arguments \
            '1: :_zulu_alias_cmds'
          ;;
        (func)
          _arguments \
            '1: :_zulu_func_cmds'
          ;;
        (var)
          _arguments \
            '1: :_zulu_var_cmds'
          ;;
        (fpath)
          _arguments \
            '1: :_zulu_fpath_cmds'

          case "$words[2]" in
            (add|rm)
              _arguments \
                '*:directory:_files -/'
              ;;
          esac
          ;;
        (cdpath)
          _arguments \
            '1: :_zulu_cdpath_cmds'

          case "$words[2]" in
            (add|rm)
              _arguments \
                '*:directory:_files -/'
              ;;
          esac
          ;;
        (path)
          _arguments \
            '1: :_zulu_path_cmds'

          case "$words[2]" in
            (add|rm)
              _arguments \
                '*:directory:_files -/'
              ;;
          esac
          ;;
        (manpath)
          _arguments \
            '1: :_zulu_manpath_cmds'

          case "$words[2]" in
            (add|rm)
              _arguments \
                '*:directory:_files -/'
              ;;
          esac
          ;;
        (link)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '--no-autoselect-themes[Don'\''t autoselect themes after installing]'

          _arguments \
            '*: :_zulu_installed_packages'
          ;;
        (uninstall|unlink)
          _arguments \
            '*: :_zulu_installed_packages'
          ;;
        (update|self-update)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '(-c --check)'{-c,--check}'[check if an update is available]'
          ;;
        (upgrade)
          _arguments \
            '*: :_zulu_installed_packages'

          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '(-c --check)'{-c,--check}'[check if upgrades are available]'
          ;;
        (list)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '(-i --installed)'{-i,--installed}'[list only installed packages]' \
            '(-n --not-installed)'{-n,--not-installed}'[list only packages which have not been installed]' \
            '(-a --all)'{-a,--all}'[list all packages]' \
            '(-s --simple)'{-s,--simple}'[do not show installed indicators]' \
            '(-d --describe)'{-d,--describe}'[show package descriptions]'
          ;;
        (bundle)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '(-f --file)'{-f,--file}'[specify a packagefile]' \
            '(-c --cleanup)'{-c,--cleanup}'[uninstall packages not present in packagefile]' \
            '(-d --dump)'{-d,--dump}'[dump installed packages to packagefile]' \
            '(-x --force)'{-x,--force}'[force writing of packages to an existing file]'
          ;;
        (init)
          _arguments -A \
            '(-h --help)'{-h,--help}'[show help text and exit]' \
            '(-c --check-for-update)'{-c,--check-for-update}'[check if updates are available]'
          ;;
      esac
      ;;
  esac
}

(( $+functions[_zulu_packages] )) || _zulu_packages() {
  _zulu_get_packages
  local expl
  _describe -t packages 'packages' _zulu_package_list "$@"
}

(( $+functions[_zulu_installed_packages] )) || _zulu_installed_packages() {
  _zulu_get_installed_packages
  local expl
  _describe -t packages 'packages' _zulu_installed_package_list "$@"
}

(( $+functions[_zulu_not_installed_packages] )) || _zulu_not_installed_packages() {
  _zulu_get_not_installed_packages
  local expl
  _describe -t packages 'packages' _zulu_not_installed_package_list "$@"
}

(( $+functions[_zulu_path_cmds] )) || _zulu_path_cmds() {
  _describe -t commands 'commands' _zulu_path_commands "$@"
}

(( $+functions[_zulu_fpath_cmds] )) || _zulu_fpath_cmds() {
  _describe -t commands 'commands' _zulu_fpath_commands "$@"
}

(( $+functions[_zulu_cdpath_cmds] )) || _zulu_cdpath_cmds() {
  _describe -t commands 'commands' _zulu_cdpath_commands "$@"
}

(( $+functions[_zulu_manpath_cmds] )) || _zulu_manpath_cmds() {
  _describe -t commands 'commands' _zulu_manpath_commands "$@"
}

(( $+functions[_zulu_alias_cmds] )) || _zulu_alias_cmds() {
  _describe -t commands 'commands' _zulu_alias_commands "$@"
}

(( $+functions[_zulu_func_cmds] )) || _zulu_func_cmds() {
  _describe -t commands 'commands' _zulu_func_commands "$@"
}

(( $+functions[_zulu_var_cmds] )) || _zulu_var_cmds() {
  _describe -t commands 'commands' _zulu_var_commands "$@"
}

(( $+functions[_zulu_cmds] )) || _zulu_cmds() {
  _describe -t commands 'commands' _zulu_commands "$@"
}

_zulu "$@"
