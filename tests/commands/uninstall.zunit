#!/usr/bin/env zunit

@setup {
  if ! _zulu_info_is_installed dummy; then
    zulu install --no-autoselect-themes --ignore-dependencies dummy
  fi
}

@teardown {
  if _zulu_info_is_installed dummy; then
    zulu uninstall dummy
  fi
}

@test 'Test "zulu uninstall" uninstalls package' {
  run zulu uninstall dummy

  assert $state equals 0
  assert "${lines[${#lines}]%"${lines[${#lines}]##*[![:space:]]}"}" same_as "\033[0;32m✔\033[0;m Finished uninstalling dummy"
}

@test 'Test "zulu uninstall" fails for not-installed package' {
  # Uninstall the package once
  run zulu uninstall dummy

  assert $state equals 0
  assert "${lines[${#lines}]%"${lines[${#lines}]##*[![:space:]]}"}" same_as "\033[0;32m✔\033[0;m Finished uninstalling dummy"

  # Run the uninstall again, this time it should fail
  run zulu uninstall dummy

  assert $state equals 1
  assert "${lines[${#lines}]%"${lines[${#lines}]##*[![:space:]]}"}" same_as "\033[0;31mPackage 'dummy' is not installed\033[0;m"
}

@test 'Test "zulu uninstall" fails for non-existent package' {
  run zulu uninstall not-a-package

  assert $state equals 1
  assert "${lines[${#lines}]%"${lines[${#lines}]##*[![:space:]]}"}" same_as "\033[0;31mPackage 'not-a-package' is not in the index\033[0;m"
}

@test 'Test "zulu uninstall" fails with no argument' {
  run zulu uninstall

  assert $state equals 1
  assert "${lines[1]}" same_as "\033[0;31mPlease specify a package name\033[0;m"
}
